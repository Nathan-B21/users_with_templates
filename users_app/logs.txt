>>> from users_app.models import User
>>> User.objects.create(first_name = "Edward", last_name = "Bludworth", email_address = "nathanbludworth@gmail.com, age = "24"
  File "<console>", line 1
    User.objects.create(first_name = "Edward", last_name = "Bludworth", email_address = "nathanbludworth@gmail.com, age = "24"
                                                                                                                           ^
SyntaxError: invalid syntax
>>> User.objects.create(first_name = "Edward", last_name = "Bludworth", email_address = "nathanbludworth@gmail.com, age = 24
  File "<console>", line 1
    User.objects.create(first_name = "Edward", last_name = "Bludworth", email_address = "nathanbludworth@gmail.com, age = 24
                                                                                                                            ^
SyntaxError: EOL while scanning string literal
>>> User.objects.create(first_name = "Edward", last_name = "Bludworth", email_address = "nathanbludworth@gmail.com, age = 24)
  File "<console>", line 1
    User.objects.create(first_name = "Edward", last_name = "Bludworth", email_address = "nathanbludworth@gmail.com, age = 24)
                                                                                                                             ^
SyntaxError: EOL while scanning string literal
>>> User.objects.create(first_name = "Edward", last_name = "Bludworth", email_address = "nathanbludworth@gmail.com", age = 24)
<User: User object (1)>
>>> User.objects.create(first_name = "Skylar", last_name = "Rivas", email_address = "dumbidiot@stupid.com", age = 24)
<User: User object (2)>
>>> User.objects.create(first_name = "Nar", last_name = "Ciso", email_address = narcisot@email.com", age = 50)
  File "<console>", line 1
    User.objects.create(first_name = "Nar", last_name = "Ciso", email_address = narcisot@email.com", age = 50)
                                                                                                              ^
SyntaxError: EOL while scanning string literal
>>> User.objects.create(first_name = "Nar", last_name = "Ciso", email_address = "narciso@email.com", age = 50)
<User: User object (3)>
>>> User.objects.all()
<QuerySet [<User: User object (1)>, <User: User object (2)>, <User: User object (3)>]>
>>> User.objects.all().__dict__
{'model': <class 'users_app.models.User'>, '_db': None, '_hints': {}, 'query': <django.db.models.sql.query.Query object at 0x00000260AF103820>, '_result_cache': None, '_sticky_filter': False, '_for_write': False, '_prefetch_related_lookups': (), '_prefetch_done': False, '_known_related_objects': {}, '_iterable_class': <class 'django.db.models.query.ModelIterable'>, '_fields': None}
>>> User.objects.all().values()_
  File "<console>", line 1
    User.objects.all().values()_
                               ^
SyntaxError: invalid syntax
>>> User.objects.all().values()
<QuerySet [{'id': 1, 'first_name': 'Edward', 'last_name': 'Bludworth', 'email_address': 'nathanbludworth@gmail.com', 'age': 24, 'created_at': datetime.datetime(2021, 3, 19, 20, 21, 29, 913948, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 3, 19, 20, 21, 29, 913948, tzinfo=<UTC>)}, {'id': 2, 'first_name': 'Skylar', 'last_name': 'Rivas', 'email_address': 'dumbidiot@stupid.com', 'age': 24, 'created_at': datetime.datetime(2021, 3, 19, 20, 24, 0, 531416, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 3, 19, 20, 24, 0, 531416, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'Nar', 'last_name': 'Ciso', 'email_address': 'narciso@email.com', 'age': 50, 'created_at': datetime.datetime(2021, 3, 19, 20, 25, 7, 72977, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 3, 19, 20, 25, 7, 72977, tzinfo=<UTC>)}]>
>>> Users.objects.last()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'Users' is not defined
>>> User.objects.last()
<User: User object (3)>
>>> User.objects.first()
<User: User object (1)>
>>> User.objects.last()
<User: User object (3)>
>>> User.objects.get(id=3)
<User: User object (3)>
>>> User.objects.get(3).last_name = "Pancakes"
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 399, in get
    clone = self.filter(*args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 892, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 910, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1290, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1315, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1187, in build_filter
    arg, value = filter_expr
TypeError: cannot unpack non-iterable int object
>>> User.objects.get(3).last_name = "Pancakes"
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 399, in get
    clone = self.filter(*args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 892, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 910, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1290, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1315, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1187, in build_filter
    arg, value = filter_expr
TypeError: cannot unpack non-iterable int object
>>> User.objects.get(3)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 399, in get
    clone = self.filter(*args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 892, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 910, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1290, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1315, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1187, in build_filter
    arg, value = filter_expr
TypeError: cannot unpack non-iterable int object
>>> User.objects.get(3)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 399, in get
    clone = self.filter(*args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 892, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\query.py", line 910, in _filter_or_exclude
    clone.query.add_q(Q(*args, **kwargs))
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1290, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1315, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "C:\Users\Nathan\Desktop\python_stack\my_environments\djangoPy3Env\lib\site-packages\django\db\models\sql\query.py", line 1187, in build_filter
    arg, value = filter_expr
TypeError: cannot unpack non-iterable int object
>>> User.objects.get(id=3)
<User: User object (3)>
>>> User.objects.get(id=3).last_name = "Pancakes"
>>> c.save()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'c' is not defined
>>> User.objects.get(id=3).last_name = "Pancakes"
>>> User.save
<function Model.save at 0x00000260ADA14700>
>>> User.objects.get(id=3)
<User: User object (3)>
>>> User.objects.get(id=3).__dict__
{'_state': <django.db.models.base.ModelState object at 0x00000260AF13E130>, 'id': 3, 'first_name': 'Nar', 'last_name': 'Ciso', 'email_address': 'narciso@email.com', 'age': 50, 'created_at': datetime.datetime(2021, 3, 19, 20, 25, 7, 72977, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 3, 19, 20, 25, 7, 72977, tzinfo=<UTC>)}
>>> user3 = User.objects.get(id=3)
>>> user3.last_name = "Pancakes"
>>> user3.save
<bound method Model.save of <User: User object (3)>>
>>> uswer3.save()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'uswer3' is not defined
>>> user3.save()
>>> User.objects.get(id=3).__dict__
{'_state': <django.db.models.base.ModelState object at 0x00000260AF13E310>, 'id': 3, 'first_name': 'Nar', 'last_name': 'Pancakes', 'email_address': 'narciso@email.com', 'age': 50, 'created_at': datetime.datetime(2021, 3, 19, 20, 25, 7, 72977, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 3, 19, 20, 45, 19, 89526, tzinfo=<UTC>)}
>>> user2 = User.objects.get(id=2)
>>> user2.delete()
(1, {'users_app.User': 1})
>>> User.objects.all().values()
<QuerySet [{'id': 1, 'first_name': 'Edward', 'last_name': 'Bludworth', 'email_address': 'nathanbludworth@gmail.com', 'age': 24, 'created_at': datetime.datetime(2021, 3, 19, 20, 21, 29, 913948, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 3, 19, 20, 21, 29, 913948, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'Nar', 'last_name': 'Pancakes', 'email_address': 'narciso@email.com', 'age': 50, 'created_at': datetime.datetime(2021, 3, 19, 20, 25, 7, 72977, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 3, 19, 20, 45, 19, 89526, tzinfo=<UTC>)}]>
>>> User.objects.all().order_by(first_name)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'first_name' is not defined
>>> User.objects.all().order_by("first_name")
<QuerySet [<User: User object (1)>, <User: User object (3)>]>
>>> User.objects.all().order_by("-first_name")
<QuerySet [<User: User object (3)>, <User: User object (1)>]>